# Generated by Django 2.1.5 on 2019-11-25 09:28

import checker.virdicts
import datetime
from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
from django.utils.timezone import utc
import enumfields.fields
import tasks.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('checker', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Contest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('team_size', models.IntegerField(default=4)),
                ('startDate', models.DateTimeField(blank=True, default=datetime.datetime(2019, 11, 25, 9, 28, 22, 408017, tzinfo=utc))),
                ('finishDate', models.DateTimeField(blank=True, default=datetime.datetime(2019, 11, 25, 9, 28, 22, 408047, tzinfo=utc))),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Contest',
                'verbose_name_plural': 'Contests',
            },
        ),
        migrations.CreateModel(
            name='GlobalTheme',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='GlobalThemeName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hardness', models.IntegerField()),
                ('global_them', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.GlobalTheme')),
            ],
        ),
        migrations.CreateModel(
            name='Points',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField()),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Contest')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Rang',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('point', models.IntegerField()),
                ('theme', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.GlobalTheme')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Rang',
                'verbose_name_plural': 'Rangs',
            },
        ),
        migrations.CreateModel(
            name='Solution',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.CharField(max_length=2000)),
                ('description', models.CharField(max_length=2000)),
                ('verdict', enumfields.fields.EnumField(default='WRONG_ANSWER', enum=checker.virdicts.Virdict, max_length=500)),
                ('submitTime', models.DateTimeField(blank=True, default=datetime.datetime(2019, 11, 25, 9, 28, 22, 407127, tzinfo=utc))),
                ('need_rang', models.IntegerField()),
                ('comments', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=2000), blank=True, size=None)),
            ],
            options={
                'verbose_name': 'Solution',
                'verbose_name_plural': 'Solutions',
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=2000)),
                ('right_answer', models.CharField(max_length=200)),
                ('title', models.CharField(default='Task', max_length=200)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('checker', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='checker.Checker')),
                ('solvers', models.ManyToManyField(related_name='solver', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Task',
                'verbose_name_plural': 'Tasks',
            },
        ),
        migrations.CreateModel(
            name='TaskCase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hardness', enumfields.fields.EnumField(default='MIDDLE', enum=tasks.models.Hardness, max_length=500)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Task')),
            ],
            options={
                'verbose_name': 'TaskCase',
                'verbose_name_plural': 'TasksCase',
            },
        ),
        migrations.CreateModel(
            name='TaskContestCase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('points', models.IntegerField()),
                ('contest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Contest')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Task')),
            ],
            options={
                'verbose_name': 'TaskContestCase',
                'verbose_name_plural': 'TaskContestCases',
            },
        ),
        migrations.CreateModel(
            name='Theme',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('general_theme', models.ManyToManyField(through='tasks.GlobalThemeName', to='tasks.GlobalTheme')),
                ('tasks', models.ManyToManyField(through='tasks.TaskCase', to='tasks.Task')),
            ],
            options={
                'verbose_name': 'Theme',
                'verbose_name_plural': 'Themes',
            },
        ),
        migrations.AddField(
            model_name='taskcase',
            name='theme',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Theme'),
        ),
        migrations.AddField(
            model_name='solution',
            name='task',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='tasks.Task'),
        ),
        migrations.AddField(
            model_name='solution',
            name='username',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='globalthemename',
            name='theme',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tasks.Theme'),
        ),
        migrations.AddField(
            model_name='globaltheme',
            name='rangs',
            field=models.ManyToManyField(through='tasks.Rang', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='contest',
            name='tasks',
            field=models.ManyToManyField(through='tasks.TaskContestCase', to='tasks.Task'),
        ),
    ]
